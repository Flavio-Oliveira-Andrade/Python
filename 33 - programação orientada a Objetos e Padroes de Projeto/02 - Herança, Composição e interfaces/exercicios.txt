### Exerc√≠cio de Fixa√ß√£o
1. Altere o c√≥digo da classe SalesReport para que ela, al√©m de gerar relat√≥rios em JSON,
gere relat√≥rios em CSV tamb√©m. Defina, primeiro, como voc√™ far√° a extens√£o da l√≥gica para
depois gerar o CSV mesmo. N√£o gaste mais que cinco minutos nesse exerc√≠cio!
Quando o rel√≥gio apitar, volte para a leitura que vamos refletir sobre a experi√™ncia!

Exerc√≠cio de Fixa√ß√£o
2. Antes de prosseguirmos para entender o que √© aquele @abstractmethod e aquele (ABC) ,
vamos fixar o entendimento de heran√ßa! Implemente uma classe SalesReportCSV
que seja herdeira da classe SalesReport , da mesma forma que fizemos com a SalesReportJSON .
Para testar seu funcionamento, instancie-a e chame sua fun√ß√£o serialize .

Exerc√≠cio de Fixa√ß√£o
3. Defina na classe SalesReport um segundo m√©todo abstrato chamado get_length que
retorna quantos itens tem no relat√≥rio. Tente chamar esse m√©todo
a partir da classe herdeira que n√£o implementa esse m√©todo e veja o erro que voc√™ recebe.
Tente instanciar a SalesReport tamb√©m! Depois disso, implemente uma l√≥gica qualquer para
esse m√©todo em uma das classes herdeiras e verifique que j√° √© poss√≠vel instanci√°-la e at√©
chamar o m√©todo!

Exerc√≠cio de Fixa√ß√£o
4. Invista cinco minutos tentando resolver esse problema! Spoiler: voc√™ encontrar√° problemas! Quais?



Agora a pr√°tica
Exerc√≠cio 1: Lembra do exerc√≠cio da TV que j√° abstra√≠mos? Hoje vamos implementar ele, por√©m com algumas modifica√ß√µes. Veja o diagrama abaixo:

Diagrama de classes da TV
Atributos:
volume - ser√° inicializado com um valor de 50 e s√≥ pode estar entre 0 e 99;
canal - ser√° inicializado com um valor de 1 e s√≥ pode estar entre 1 e 99;
tamanho - ser√° inicializado com o valor do par√¢metro;
ligada - ser√° inicializado com o valor de False , pois est√° inicialmente desligado.
Todos os atributos devem ser privados.
M√©todos:
aumentar_volume - aumenta o volume de 1 em 1 at√© o m√°ximo de 99;
diminuir_volume - diminui o volume de 1 em 1 at√© o m√≠nimo de 0;
modificar_canal - altera o canal de acordo com o par√¢metro recebido e deve lan√ßar uma exce√ß√£o ( ValueError ) caso o valor esteja fora dos limites;
ligar_desligar - alterna o estado da TV entre ligado e desligado ( True / False ).
Exerc√≠cio 2: Defina uma classe Estatistica que calcule m√©dia, mediana e moda de uma lista de n√∫meros.
üê¶ Dica: Utilize m√©todos de classe.

Diagrama de classes da Estatistica
Exerc√≠cio 3: Que tal agora relembrarmos o exerc√≠cio das figuras geom√©tricas? Implemente o diagrama de classes abaixo.

Diagrama de classes das figuras geom√©tricas
Exerc√≠cio 4: Implemente um sistemas de logs por n√≠vel de severidade, seguindo o diagrama abaixo.

Diagrama de classes do sistema de logs
Classe Log
Atributos:
manipuladores - Ser√° inicializado com um conjunto de subclasses de ManipuladorDeLog ;
M√©todos:
adicionar_manipulador - adiciona um manipulador ao conjunto de manipuladores do gerenciamento de logs ( Log );
info - dispara logs com n√≠vel de severidade "INFO" ;
alerta - dispara logs com n√≠vel de severidade "ALERTA" ;
erro - dispara logs com n√≠vel de severidade "ERRO" ;
debug - dispara logs com n√≠vel de severidade "DEBUG" ;
__log - dispara os logs formatados para todos os manipuladores (invocado para cada n√≠vel de severidade, para evitar duplica√ß√£o de c√≥digo);
__formatar - formata os logs de acordo com o padr√£o "[ERRO - 01/01/2020 13:00:00]: ZeroDivisionError: division by zero";
A interface de manipula√ß√£o de logs deve utilizar m√©todos de classe.
üê¶ Dica: Voc√™ pode utilizar a fun√ß√£o print em tela ou em arquivo (que pode ter um nome padr√£o).
Exerc√≠cio 5: Implemente um gerenciador de quartos de hotel, simplificado, conforme o diagrama a seguir.

Diagrama de classes do sistema de hoteis
Classe Quarto
Atributos:
numero - n√∫mero do quarto;
andar - andar do quarto;
quantidade_de_hospedes - capacidade de hospedagem do quarto;
preco - valor da hospedagem;
reservado - sempre inicializado com False , indica o estado do quarto.
Classe Hospede
Atributos:
nome - nome do hospede;
cpf - CPF do hospede (para fins de simplifica√ß√£o, n√£o √© necess√°rio validar o CPF).
Classe Reserva
Atributos:
quarto - √© composto por uma inst√¢ncia de quarto;
hospede - √© composto por uma inst√¢ncia de hospede.
Classe Hotel
Atributos:
nome - nome do hotel;
quartos - √© composto por uma lista de inst√¢ncias de quarto;
reservas - √© composto por uma lista de inst√¢ncias de reserva;
M√©todos:
check_in - recebe uma quantidade indefinida de hospedes e busca por um quarto dispon√≠vel com capacidade suficiente. Se houver um quarto dispon√≠vel, altera o estado do quarto e cria uma reserva para cada hospede. Caso n√£o haja quartos dispon√≠veis deve lan√ßar a exce√ß√£o IndexError com a mensagem "N√£o h√° quartos dispon√≠veis para essa quantidade de hospedes";
check_out - recebe uma inst√¢ncia de quarto, alterando seu estado e removendo todas as suas reservas;
quartos_disponiveis - retorna uma lista de quartos dispon√≠veis que comportam uma quantidade_de_hospedes (passado por par√¢metro), priorizada da menor capacidade de hospedes poss√≠vel para a maior. Lembre-se, para que um quarto esteja dispon√≠vel, al√©m de respeitar a capacidade, ele n√£o pode estar reservado.
Observa√ß√£o: considere todos os atributos como sendo p√∫blicos para fins de simplifica√ß√£o da implementa√ß√£o.









Ci√™ncia da Computa√ß√£o
Bloco 33 - Programa√ß√£o Orientada a Objetos e Padr√µes de Projeto
33.2 Heran√ßa, Composi√ß√£o e Interfaces - Gabarito
Gabarito dos exerc√≠cios
Lembre-se, sempre, que os exerc√≠cios servem principalmente para voc√™ treinar e encontrar as suas d√∫vidas! √â esperado que voc√™ trave em algum momento. Somente olhe o gabarito depois de tentar resolver o problema por algum tempo! Garanta que voc√™ entendeu tudo que est√° aqui, explique para "a parede" para ter certeza e, se houver d√∫vida, tire sua d√∫vida conosco!
Exerc√≠cios de fixa√ß√£o
Exerc√≠cio 1
C√≥digo base para o exerc√≠cio:
Copiar
import json


class SalesReport():
    def __init__(self, export_file):
        self.export_file = export_file + '.json'

    def build(self):
        """ Aqui colocamos a l√≥gica para a entidade 'se criar',
        ou seja, criar um relat√≥rio imprim√≠vel. Por simplicidade,
        vamos omitir essa l√≥gica nos exemplos! """
        return [{
                'Coluna 1': 'Dado 1',
                'Coluna 2': 'Dado 2',
                'Coluna 3': 'Dado 3'
                },
                {
                'Coluna 1': 'Dado A',
                'Coluna 2': 'Dado B',
                'Coluna 3': 'Dado C'
                }]

    def serialize(self):
        # Vamos gerar, aqui, o nosso relat√≥rio em formato JSON
        with open(self.export_file, 'w') as file:
            json.dump(self.build(), file)


# Para testar
relatorio_de_vendas = SalesReport('meu_relatorio')
relatorio_de_vendas.serialize()
Altere o c√≥digo da classe SalesReport para que ela, al√©m de gerar relat√≥rios em JSON, gere relat√≥rios em CSV tamb√©m. Defina, primeiro, como voc√™ far√° a extens√£o da l√≥gica para depois gerar o CSV mesmo. N√£o gaste mais que cinco minutos nesse exerc√≠cio! Quando o rel√≥gio apitar, volte para a leitura que vamos refletir sobre a experi√™ncia!
Resposta
H√° v√°rias formas de resolver esse problema! Na se√ß√£o seguinte do conte√∫do, por√©m, vemos que n√£o √© poss√≠vel estender a funcionalidade conforme pedido sem evitar algum retrabalho. O prop√≥sito do exerc√≠cio √© evidenciar o problema que o c√≥digo, como est√°, gera quando queremos expandir suas funcionalidades - para ilustrar, a seguir, como um bom c√≥digo evitaria esse problema com o uso de heran√ßa.
Abaixo mostramos uma das formas de resolver o problema, revisitando tamb√©m o que estudamos sobre leitura de CSVs em Python.
Copiar
import json
from csv import DictWriter


class SalesReport():
    def __init__(self, export_file):
        self.export_file = export_file + '.json'

    def build(self):
        """ Aqui colocamos a l√≥gica para a entidade 'se criar',
        ou seja, criar um relat√≥rio imprim√≠vel. Por simplicidade,
        vamos omitir essa l√≥gica nos exemplos! """
        return [{
                'Coluna 1': 'Dado 1',
                'Coluna 2': 'Dado 2',
                'Coluna 3': 'Dado 3'
                },
                {
                'Coluna 1': 'Dado A',
                'Coluna 2': 'Dado B',
                'Coluna 3': 'Dado C'
                }]

    def serialize(self):
        with open(self.export_file, 'w') as file:
            json.dump(self.build(), file)

    def serialize_csv(self):
        with open('meu_relatorio.csv', 'w') as file:
            headers = ["Coluna 1", "Coluna 2", "Coluna 3"]
            csv_writer = DictWriter(file, headers)
            csv_writer.writeheader()
            for item in self.build():
                csv_writer.writerow(item)


# Para testar
relatorio_de_vendas = SalesReport('meu_relatorio')
relatorio_de_vendas.serialize()
relatorio_de_vendas.serialize_csv()
Exerc√≠cio 2
C√≥digo base para o exerc√≠cio:
Copiar
from abc import ABC, abstractmethod
import json


class SalesReport(ABC):
    def __init__(self, export_file):
        self.export_file = export_file

    def build(self):
        return [{
                'Coluna 1': 'Dado 1',
                'Coluna 2': 'Dado 2',
                'Coluna 3': 'Dado 3'
                },
                {
                'Coluna 1': 'Dado A',
                'Coluna 2': 'Dado B',
                'Coluna 3': 'Dado C'
                }]

    @abstractmethod
    def serialize(self):
        raise NotImplementedError


class SalesReportJSON(SalesReport):
    def serialize(self):
        with open(self.export_file + '.json', 'w') as file:
            json.dump(self.build(), file)


# Para testar
relatorio_de_vendas = SalesReportJSON('meu_relatorio')
relatorio_de_vendas.serialize()
Antes de prosseguirmos para entender o que √© aquele @abstractmethod e aquele (ABC) , vamos fixar o entendimento de heran√ßa! Implemente uma classe SalesReportCSV que seja herdeira da classe SalesReport , da mesma forma que fizemos com a SalesReportJSON . Para testar seu funcionamento, instancie-a e chame sua fun√ß√£o serialize .
Resposta
O que nos interessa aqui √© a familiariza√ß√£o com a sintaxe de heran√ßa, para come√ßarmos a "sentir" o que isso √©, al√©m de refor√ßar o que aprendemos sobre instanciar objetos e chamar suas fun√ß√µes! Al√©m disso, queremos mostrar que, nas classes herdeiras, usa-se a fun√ß√£o build definida s√≥ na classe ascendente. Isso √© a heran√ßa quem faz!
Copiar
from abc import ABC, abstractmethod
from csv import DictWriter
import json


class SalesReport(ABC):
    def __init__(self, export_file):
        self.export_file = export_file

    def build(self):
        return [{
                'Coluna 1': 'Dado 1',
                'Coluna 2': 'Dado 2',
                'Coluna 3': 'Dado 3'
                },
                {
                'Coluna 1': 'Dado A',
                'Coluna 2': 'Dado B',
                'Coluna 3': 'Dado C'
                }]

    @abstractmethod
    def serialize(self):
        raise NotImplementedError


class SalesReportJSON(SalesReport):
    def serialize(self):
        with open(self.export_file + '.json', 'w') as file:
            json.dump(self.build(), file)


class SalesReportCSV(SalesReport):
    def serialize(self):
        with open(self.export_file + '.csv', 'w') as file:
            headers = ["Coluna 1", "Coluna 2", "Coluna 3"]
            csv_writer = DictWriter(file, headers)
            csv_writer.writeheader()
            for item in self.build():
                csv_writer.writerow(item)


# Para testar
relatorio_de_vendas = SalesReportJSON('meu_relatorio')
relatorio_de_vendas.serialize()

relatorio_de_compras = SalesReportCSV('meu_relatorio')
relatorio_de_compras.serialize()
Exerc√≠cio 3
C√≥digo base para o exerc√≠cio:
Copiar
from abc import ABC, abstractmethod
import json


class SalesReport(ABC):
    def __init__(self, export_file):
        self.export_file = export_file

    def build(self):
        return [{
                'Coluna 1': 'Dado 1',
                'Coluna 2': 'Dado 2',
                'Coluna 3': 'Dado 3'
                },
                {
                'Coluna 1': 'Dado A',
                'Coluna 2': 'Dado B',
                'Coluna 3': 'Dado C'
                }]

    @abstractmethod
    def serialize(self):
        raise NotImplementedError


class SalesReportJSON(SalesReport):
    def serialize(self):
        with open(self.export_file + '.json', 'w') as file:
            json.dump(self.build(), file)
Defina na classe SalesReport um segundo m√©todo abstrato chamado get_length que retorna quantos itens tem no relat√≥rio. Tente chamar esse m√©todo a partir da classe herdeira que n√£o implementa esse m√©todo e veja o erro que voc√™ recebe. Tente instanciar a SalesReport tamb√©m! Depois disso, implemente uma l√≥gica qualquer para esse m√©todo em uma das classes herdeiras e verifique que j√° √© poss√≠vel instanci√°-la e at√© chamar o m√©todo!
Resposta
Aqui nosso objeto √© ver o erro que tentar instanciar uma classe abstrata - ou invocar um m√©todo abstrato - gera quando chamamos. Se voc√™ fizer isso por acidente, j√° saber√° o motivo! Depois, queremos que se veja essas funcionalidades sendo usadas numa l√≥gica de heran√ßa, que √© o que queremos.
Copiar
from abc import ABC, abstractmethod
import json


class SalesReport(ABC):
    def __init__(self, export_file):
        self.export_file = export_file

    def build(self):
        return [{
                'Coluna 1': 'Dado 1',
                'Coluna 2': 'Dado 2',
                'Coluna 3': 'Dado 3'
                },
                {
                'Coluna 1': 'Dado A',
                'Coluna 2': 'Dado B',
                'Coluna 3': 'Dado C'
                }]

    @abstractmethod
    def serialize(self):
        raise NotImplementedError

    @abstractmethod
    def get_length(self):
        raise NotImplementedError


class SalesReportJSON(SalesReport):
    def serialize(self):
        with open(self.export_file + '.json', 'w') as file:
            json.dump(self.build(), file)

    def get_length(self):
        return 4 # eu rolei um dado, garanto que √© aleat√≥rio.


# Para testar

# Isso n√£o funcionar√°
# meu_relatorio = SalesReport()

# Isso tamb√©m n√£o, a n√£o ser que SalesReportJSON defina a fun√ß√£o `get_length`
meu_relatorio = SalesReportJSON('meu_relatorio')
print(meu_relatorio.get_length())
Exerc√≠cio 4
Invista cinco minutos tentando resolver esse problema! Spoiler: voc√™ encontrar√° problemas! Quais?
Resposta
O problema que voc√™ ter√° aqui √© o mesmo que o problema descrito na se√ß√£o Como estender o meu c√≥digo? , mas dessa vez heran√ßa tamb√©m n√£o ajuda! A se√ß√£o seguinte explica no detalhe, mas a id√©ia √© que voc√™ teria que criar uma infinidade de classes herdeiras com c√≥digo replicado para resolver o problema, ou mudar nomes e assinaturas, e nada disso a gente pode fazer!
A id√©ia √© ilustrar a vantagem de se usar composi√ß√£o !
Exerc√≠cios do dia
A seguir encontra-se uma sugest√£o de solu√ß√£o para os exerc√≠cios propostos.
Exerc√≠cio 1
Lembra do exerc√≠cio da TV que j√° abstra√≠mos? Hoje vamos implementar ele, por√©m com algumas modifica√ß√µes. Veja o diagrama abaixo:

Diagrama de classes da TV
Atributos:
volume - ser√° inicializado com um valor de 50 e s√≥ pode estar entre 0 e 99;
canal - ser√° inicializado com um valor de 1 e s√≥ pode estar entre 1 e 99;
tamanho - ser√° inicializado com o valor do par√¢metro;
ligada - ser√° inicializado com o valor de False , pois est√° inicialmente desligado.
Todos os atributos devem ser privados.
M√©todos:
aumentar_volume - aumenta o volume de 1 em 1 at√© o m√°ximo de 99;
diminuir_volume - diminui o volume de 1 em 1 at√© o m√≠nimo de 0;
modificar_canal - altera o canal de acordo com o par√¢metro recebido e deve lan√ßar uma exce√ß√£o ( ValueError ) caso o valor esteja fora dos limites;
ligar_desligar - alterna o estado da TV entre ligado e desligado ( True / False ).
Resposta
Copiar
class TV:
    def __init__(self, tamanho):
        self.__volume = 50
        self.__canal = 1
        self.__tamanho = tamanho
        self.__ligada = False

    def aumentar_volume(self):
        if self.__volume <= 99:
            self.__volume += 1

    def diminuir_volume(self):
        if self.__volume >= 0:
            self.__volume -= 1

    def modificar_canal(self, canal):
        if canal <= 1 or canal >= 99:
            raise ValueError('Canal indispon√≠vel')

        self.__canal = canal

    def ligar_desligar(self):
        self.__ligada = not self.__ligada
Exerc√≠cio 2
Defina uma classe Estatistica que calcule m√©dia, mediana e moda de uma lista de n√∫meros.
üê¶ Dica: Utiliza m√©todos de classe.

Diagrama de classes da Estatistica
Resposta
Copiar
from collections import Counter


class Estatistica:
    @classmethod
    def media(cls, numbers):
        return sum(numbers) / len(numbers)

    @classmethod
    def mediana(cls, numbers):
        numbers.sort()
        index = len(numbers) // 2
        if len(numbers) % 2 == 0:
            return (numbers[index - 1] + numbers[index]) / 2

        return numbers[index]

    @classmethod
    def moda(cls, numbers):
        number, _ = Counter(numbers).most_common()[0]
        return number
Exerc√≠cio 3
Que tal agora relembrarmos o exerc√≠cio das figuras geom√©tricas? Implemente o diagrama de classes abaixo.

Diagrama de classes das figuras geom√©tricas
Resposta
Copiar
from abc import ABC, abstractmethod
from math import pi as PI


class FiguraGeometrica(ABC):
    @abstractmethod
    def area(self):
        raise NotImplementedError

    @abstractmethod
    def perimetro(self):
        raise NotImplementedError


class Quadrado(FiguraGeometrica):
    def __init__(self, lado):
        self.lado = lado

    def area(self):
        return self.lado * self.lado

    def perimetro(self):
        return 4 * self.lado


class Retangulo(FiguraGeometrica):
    def __init__(self, base, altura):
        self.base = base
        self.altura = altura

    def area(self):
        return self.base * self.altura

    def perimetro(self):
        return 2 * (self.base + self.altura)


class Circulo(FiguraGeometrica):
    def __init__(self, raio):
        self.raio = raio

    def area(self):
        return PI * self.raio * self.raio

    def perimetro(self):
        return 2 * PI * self.raio
Exerc√≠cio 4
Implemente um sistemas de logs por n√≠vel de severidade, seguindo o diagrama abaixo.

Diagrama de classes do sistema de logs
Classe Log
Atributos:
manipuladores - Ser√° inicializado com um conjunto de subclasses de ManipuladorDeLog ;
M√©todos:
adicionar_manipulador - adiciona um manipulador ao conjunto de manipuladores do gerenciamento de logs ( Log );
info - dispara logs com n√≠vel de severidade "INFO" ;
alerta - dispara logs com n√≠vel de severidade "ALERTA" ;
erro - dispara logs com n√≠vel de severidade "ERRO" ;
debug - dispara logs com n√≠vel de severidade "DEBUG" ;
__log - dispara os logs formatados para todos os manipuladores (invocado para cada n√≠vel de severidade, para evitar duplica√ß√£o de c√≥digo);
__formatar - formata os logs de acordo com o padr√£o "[ERRO - 01/01/2020 13:00:00]: ZeroDivisionError: division by zero";
A interface de manipula√ß√£o de logs deve utilizar m√©todos de classe.
üê¶ Dica: Voc√™ pode utilizar a fun√ß√£o print em tela ou em arquivo (que pode ter um nome padr√£o).
Resposta
Copiar
from abc import ABC, abstractmethod
from datetime import datetime


class ManipuladorDeLog(ABC):
    @classmethod
    @abstractmethod
    def log(cls, msg):
        raise NotImplementedError


class LogEmArquivo(ManipuladorDeLog):
    @classmethod
    def log(cls, msg):
        with open('log.txt', 'a') as arquivo:
            print(msg, file=arquivo)


class LogEmTela(ManipuladorDeLog):
    @classmethod
    def log(cls, msg):
        print(msg)


class Log:
    def __init__(self, manipuladores):
        self.__manipuladores = set(manipuladores)

    def adicionar_manipulador(self, manipulador):
        self.__manipuladores.add(manipulador)

    def info(self, msg):
        self.__log('INFO', msg)

    def alerta(self, msg):
        self.__log('ALERTA', msg)

    def erro(self, msg):
        self.__log('ERRO', msg)

    def debug(self, msg):
        self.__log('DEBUG', msg)

    def __log(self, nivel, msg):
        for manipulador in self.__manipuladores:
            manipulador.log(self.__formatar(nivel, msg))

    def __formatar(self, nivel, msg):
        data = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        return f"[{nivel} - {data}]: {msg}"
Exerc√≠cio 5
Implemente um gerenciador de quartos de hotel, simplificado, conforme o diagrama a seguir.

Diagrama de classes do sistema de hoteis
Classe Quarto
Atributos:
numero - n√∫mero do quarto;
andar - andar do quarto;
quantidade_de_hospedes - capacidade de hospedagem do quarto;
preco - valor da hospedagem;
reservado - sempre inicializado com False , indica o estado do quarto.
Classe Hospede
Atributos:
nome - nome do hospede;
cpf - CPF do hospede (para fins de simplifica√ß√£o, n√£o √© necess√°rio validar o CPF).
Classe Reserva
Atributos:
quarto - √© composto por uma inst√¢ncia de quarto;
hospede - √© composto por uma inst√¢ncia de hospede.
Classe Hotel
Atributos:
nome - nome do hotel;
quartos - √© composto por uma lista de inst√¢ncias de quarto;
reservas - √© composto por uma lista de inst√¢ncias de reserva;
M√©todos:
check_in - recebe uma quantidade indefinida de hospedes e busca por um quarto dispon√≠vel com capacidade suficiente. Se houver um quarto dispon√≠vel, altera o estado do quarto e cria uma reserva para cada hospede. Caso n√£o haja quartos dispon√≠veis deve lan√ßar a exce√ß√£o IndexError com a mensagem "N√£o h√° quartos dispon√≠veis para essa quantidade de hospedes";
check_out - recebe uma inst√¢ncia de quarto, alterando seu estado e removendo todas as suas reservas;
quartos_disponiveis - retorna uma lista de quartos dispon√≠veis que comportam uma quantidade_de_hospedes (passado por par√¢metro), priorizada da menor capacidade de hospedes poss√≠vel para a maior. Lembre-se, para que um quarto esteja dispon√≠vel, al√©m de respeitar a capacidade, ele n√£o pode estar reservado.
Observa√ß√£o: considere todos os atributos como sendo p√∫blicos para fins de simplifica√ß√£o da implementa√ß√£o.
üê¶ Dica: Voc√™ pode utilizar o m√©todo sorted com o par√¢metro key , para definir seu crit√©rio de ordena√ß√£o. E para utilizar um atributo como crit√©rio voc√™ pode utilizar a fun√ß√£o attrgetter do m√≥dulo operator .
Resposta
Copiar
from operator import attrgetter


class Quarto:
    def __init__(self, numero, andar, quantidade_de_hospedes, preco):
        self.numero = numero
        self.andar = andar
        self.quantidade_de_hospedes = quantidade_de_hospedes
        self.preco = preco
        self.reservado = False


class Hospede:
    def __init__(self, nome, cpf):
        self.nome = nome
        self.cpf = cpf


class Reserva:
    def __init__(self, quarto, hospede):
        self.quarto = quarto
        self.hospede = hospede


class Hotel:
    def __init__(self, nome, quartos, reservas):
        self.nome = nome
        self.quartos = quartos
        self.reservas = reservas

    def check_in(self, *hospedes):
        try:
            quarto = self.quartos_disponiveis(len(hospedes))[0]
        except (IndexError):
            raise IndexError(
                'N√£o h√° quartos dispon√≠veis para essa quantidade de hospedes'
            )
        else:
            quarto.reservado = True
            for hospede in hospedes:
                self.reservas.append(Reserva(quarto, hospede))

    def check_out(self, quarto):
        quarto.reservado = False
        self.reservas = [
            reserva
            for reserva in self.reservas
            if reserva.quarto != quarto
        ]

    def quartos_disponiveis(self, quantidade_de_hospedes):
        return sorted(
            [
                quarto
                for quarto in self.quartos
                if not quarto.reservado and
                quantidade_de_hospedes <= quarto.quantidade_de_hospedes
            ],
            key=attrgetter('quantidade_de_hospedes')
        )
¬© Trybe 2022
¬∑
Manual da Pessoa Estudante
Feito e constantemente atualizado pelo time Trybe com Elixir, Phoenix, React, Tailwind CSS e üíö
